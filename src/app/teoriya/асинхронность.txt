setTimeout(function() {
    console.log('1')
}, 2000) --- выполнится через 2 секунды

если setTimeout = 0 ms - он все равно кладется в очередь и будет выполнен асинхронно

-----

// Пример асинхронной функции, которая возвращает промис
function fetchData() {
  return new Promise((resolve, reject) => {
    // Симуляция асинхронной операции, например, загрузка данных из сети
    setTimeout(() => {
      const data = { name: "John", age: 30 };
      // Проверяем условие и разрешаем или отклоняем промис
      if (data) {
        resolve(data); // В случае успеха разрешаем промис с данными
      } else {
        reject("Failed to fetch data"); // В случае ошибки отклоняем промис с сообщением об ошибке
      }
    }, 2000); // Симуляция задержки в 2 секунды
  });
}.then((data) => { // Использование промича
    console.log("Data fetched successfully:", data);
    // Здесь можно выполнить дополнительные операции с полученными данными
  })
  .catch((error) => {
    console.error("Error fetching data:", error);
    // Обработка ошибки при загрузке данных
  }).finally(() => {}) вне зависимости от наличия ошибки работает , хз зачем

-----

const sleep = ms => {
    return newPromise (resolve => {
    setTimeout(() => resolve(), ms)
})
}

sleep(3000).then(() => console.log('After 3 sec'))

---

Promise.all([sleep(2000), sleep(5000)]).then(() => {
    console.log('After all promises')  // after 5 sec
})

---

Promise.race([sleep(2000), sleep(5000)]).then(() => {
    console.log('Race promises')  // выполняется самый быстрый промис, а потом после всех (all)
})